#!/bin/bash

export PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:$PATH

version="v1"
VIRSH=/usr/bin/virsh
vm_info_file="/tmp/vminfo"

function usage() {
    echo "option args: [-a |-d |-i |-s |-n |-b |-v |]"
        echo "usage:"
        echo "-a    |  display all the vm info"
        echo "-d    |  display the vm disk"
        echo "-i    |  display the vm ip"
        echo "-s    |  display the total resources"
        echo "-n    |  display the node information"
        echo "-b    |  start the domain at boot"
        echo "-h    |  display the help"
        echo "-v    |  display the version"
        echo "stop        |  vmm stop domain"
        echo "start       |  vmm start domain "
        echo "stopall     |  vmm stopall"
        echo "startall    |  vmm startall"
        echo "setcpu      |  vmm setcpu domain 2"
        echo "setmem      |  vmm setmem domain 8G"
        echo "setdisk     |  vmm setdisk domain data2 2T vdb/vdc/vdd ..."
        echo "setbr1      |  vmm setbr1 domain"
}

function what_system()
{
    # 0: ubuntu  1: centos  2: vmware esx 3: debian 4: red hat 100: other

    os_file='/etc/centos-release'
    if [[ -f $os_file ]]; then
        if grep -iq 'centos' $os_file; then
            arg="CentOS "$(grep -i 'centos' $os_file|sed 's; ;\n;g'|grep "^[1-9]"|awk -F '.' '{print $1"."$2}'|sed 's;\.$;;g')
            [[ $? -ne 0 ]] && arg='CentOS'
            echo -n $arg;return 1
        fi
    fi

    os_file='/etc/redhat-release'
    if [[ -f $os_file ]]; then
        if grep -iq 'centos' $os_file; then
            arg="CentOS "$(grep -i 'centos' $os_file|sed 's; ;\n;g'|grep "^[1-9]"|awk -F '.' '{print $1"."$2}'|sed 's;\.$;;g')
            [[ $? -ne 0 ]] && arg='CentOS'
            echo -n $arg;return 1
        fi

        if grep -iq 'red hat' $os_file; then
            arg="Red Hat "$(grep -i 'red hat' $os_file|sed 's; ;\n;g'|grep "^[1-9]"|awk -F '.' '{print $1"."$2}'|sed 's;\.$;;g')
            [[ $? -ne 0 ]] && arg='Rad Hat'
            echo -n $arg;return 4
        fi
    fi

    os_file='/etc/issue'
    if [[ -f $os_file ]]; then
        if grep -iq 'ubuntu' $os_file; then
            arg="Ubuntu "$(grep -i 'ubuntu' $os_file|sed 's; ;\n;g'|grep "^[1-9]"|awk -F '.' '{print $1"."$2}'|sed 's;\.$;;g')
            [[ $? -ne 0 ]] && arg='Ubuntu'
            echo -n $arg;return 0
        fi

        if grep -iq 'centos' $os_file; then
            arg="CentOS "$(grep -i 'centos' $os_file|sed 's; ;\n;g'|grep "^[1-9]"|awk -F '.' '{print $1"."$2}'|sed 's;\.$;;g')
            [[ $? -ne 0 ]] && arg='CentOS'
            echo -n $arg;return 1
        fi

        if grep -iq 'vmware esx' $os_file; then
            arg="Vmware ESX "$(grep -i 'vmware esx' $os_file|sed 's; ;\n;g'|grep "^[1-9]"|awk -F '.' '{print $1"."$2}'|sed 's;\.$;;g')
            [[ $? -ne 0 ]] && arg='Vmware ESX'
            echo -n $arg;return 2
        fi

        if grep -iq 'debian' $os_file; then
            arg="Debian "$(grep -i 'debian' $os_file|sed 's; ;\n;g'|grep "^[1-9]"|awk -F '.' '{print $1"."$2}'|sed 's;\.$;;g')
            [[ $? -ne 0 ]] && arg='Debian'
            echo -n $arg;return 3
        fi

        if grep -iq 'red hat' $os_file; then
            arg="Red Hat "$(grep -i 'red hat' $os_file|sed 's; ;\n;g'|grep "^[1-9]"|awk -F '.' '{print $1"."$2}'|sed 's;\.$;;g')
            [[ $? -ne 0 ]] && arg='Rad Hat'
            echo -n $arg;return 4
        fi
    fi

    echo -n 'unknown';return 100
}

function is_valid_ip()
{

    ip=$1
    if ! echo $ip|grep -iqE "^[0-9]{1,3}(\.[0-9]{1,3}){3}$"; then
        return 1
    fi

    ip1=$(echo $ip|cut -d '.' -f 1)
    ip2=$(echo $ip|cut -d '.' -f 2)
    ip3=$(echo $ip|cut -d '.' -f 3)
    ip4=$(echo $ip|cut -d '.' -f 4)

    if [[ $ip1 -ge 255 ]] || [[ $ip1 -le 0 ]]; then
        return 1
    fi

    if [[ $ip2 -ge 255 ]] || [[ $ip2 -lt 0 ]]; then
        return 1
    fi

    if [[ $ip3 -ge 255 ]] || [[ $ip3 -lt 0 ]]; then
        return 1
    fi

    if [[ $ip4 -ge 255 ]] || [[ $ip4 -le 0 ]]; then
        return 1
    fi

    return 0
}


function get_ip_list()
{
    os_str=$1

    if echo $os_str|grep -iq "centos 7"; then
        ip_list=`ifconfig |grep -v 172.17|grep -v 192.168.122|grep -v 127.0.0.1| grep 'inet '|awk '{print $2}'| cut -d. -f 1-3`
    else
        ip_list=`ifconfig |grep -v 172.17|grep -v 192.168.122| awk '/inet addr/ && !/127.0.0.1/ {print substr($2,6)}' | cut -d. -f 1-3`
    fi

    echo -n $ip_list

}


#get all ip address from host and execute arp broadcast
function ping_server() {
    ip_list=$1
        for ip in $ip_list
        do
             for ij in `seq 1 254`;do
                     ( ping -W 1 -c 1 ${ip}.${ij} &>/dev/null) &
             done
             wait
        done
}



function get_arptable()
{

    OS=$(what_system 2> /dev/null)
    OS_CODE=$?
    if [[ $OS_CODE -eq 100 ]]; then
        echo "only support centos, ubuntu, vmware esx, debian, red hat"
        exit 1
    fi

    my_ip_list=$(get_ip_list "$OS")
    ping_server "$my_ip_list"

}

#get node info
function get_node_info() {
    $VIRSH nodeinfo 
}

#get the running vm number
function get_vm_num() {
    $VIRSH  list |grep 'running$' |wc -l 
}

# Get list of all virtual machines
function list_all_domains() {
    $VIRSH list --all | awk '$1 == "-" || $1+0 > 0 { print $2 }'
}

# Get list of active virtual machines
function list_domains() {
    $VIRSH list | awk '$1 == "-" || $1+0 > 0 { print $2 }'
   #$VIRSH list | grep running | awk '{ print $2}'
}


function list_running_domains {
        virsh list | grep running | awk '{ printf "%s ", $2 }'
}

function vm_running () {
        running_domains=`list_running_domains`

        if [[ $running_domains =~ "$1" ]]; then
                echo "$running_domains on"
                return 0
        else
                echo "$running_domains off"
                return 1
        fi
}



function setcpu() {
        domain=$1
        cpucount=$2

        echo -n "Set  $domain vcpus to '$cpucount' ... "
        virsh setvcpus $domain --count $cpucount --maximum --config > /dev/null
        virsh setvcpus $domain --count $cpucount --config > /dev/null
        echo "done"
     #   start $domain
}

function setmem() {
        domain=$1
        guestmem=$2

        echo -n "Set $domain guestmem to  $guestmem ... "
        virsh setmaxmem $domain --config $guestmem > /dev/null
        virsh setmem $domain --config $guestmem > /dev/null
        echo "done"
    #    start $domain
}

#add disk
#echo " ./vmm setdisk vm data2  2T vdb"
# qemu-img create -f qcow2 /data3/vm-images/ftp_vdb.qcow2 3T
# virsh attach-disk wx-outftp-1 /data3/vm-images/ftp_vdb.qcow2  vdb --cache none --subdriver qcow2 --config --persistent

function setdisk() {
    domain=$1
    volume=$2
    size=$3
    vd=$4
    disk_file=/$volume/vm-images/$domain-$size-$vd.qcow2

    echo -n "create disk $disk_file  for  $domain ... "
    echo ""
    /usr/bin/qemu-img  create -f qcow2  $disk_file  $size
    echo "done"
    echo ""

    echo -n "add disk $disk_file to  $domain as $vd ... "
    echo ""
    virsh attach-disk $domain  $disk_file  $vd --cache none --subdriver qcow2 --config --persistent
    echo "done"

}

#virsh attach-interface --domain cos --type bridge --source br1 --model virtio --persistent
function setbr1() {
        domain=$1
        echo -n "$domain attach-interface br1"
        virsh attach-interface --domain $domain --type bridge --source br1 --model virtio --persistent 
        echo "done"
}

#autostart domains
function autostart_domains() {
    list_domains | while read vmName; do
    $VIRSH autostart $vmName
done
}

#stop all domains
function stopall() {
    list_domains | while read vmName; do
    $VIRSH shutdown $vmName
done
}

#start all domains
function startall() {
    list_all_domains | while read vmName; do
    $VIRSH start $vmName
done
}

function stop() {
        domain=$1

        echo -n "shutdown domain  $domain  ... "
        virsh shutdown $domain > /dev/null
        while vm_running $domain; do
            sleep 1
        done

        echo "done"
}




function start() {
        domain=$1

        echo -n "start domain $domain  ... "
        virsh start $domain > /dev/null
        echo "done"
}



#autostart domains status
function autostart_status() {
    list_domains | while read vmName; do
    autostartStatus=`$VIRSH dominfo $vmName | grep -i autostart`
    echo $vmName $autostartStatus
done
}



#get vm name
function get_vmnames() {
	ps aux | grep "qemu-kvm " | grep -v 'grep' | \
	awk '{
		for(i=1;i<=NF;i++) {
			if($i == "-name"){ print $(i+1);break }
		}
	}' > $vm_info_file
}



#get vm cpu,memory
function get_vcpuvmems() {
	virsh dominfo "$1" | \
	awk '
		/^CPU\(s\)/ {print $2}
		/^Used memory/ {print $3/1024/1024"G"}
	' | xargs
}

#get vhost block
#awk: change the unit "M" to "G"
function get_vmblk() {
	blklist=$(virsh domblklist "$1" | awk 'NR>=3{if($2 != "-" && NF>=1) print $1":"$2}' | xargs)
	declare -i num && num=1
	for ii in ${blklist}
	do 
		blkbasename=`basename ${ii}`
		qemu-img info $(echo $ii | awk -F '[:]' '{print $2}') | \
		awk -v a="$ii" -v b="${blkbasename}" -v c="${num}" -v d="f${alter}" '
			/^virtual size:/ {Vsize=$3}
			/^disk size:/ {if($3 ~ /M/ && d == "f-s") Dsize=int(substr($3,1,match($3,/M/)-1)/1024*100)/100"G";else Dsize=$3}
		END{
			if(d == "f-s") print "d:"Dsize":v:"Vsize
			else if(d == "f-d") print a"["Dsize"]""["Vsize"]"
			else if(c >= 2) print "["Dsize"]""["Vsize"]"
			else print a"["Dsize"]""["Vsize"]"
		}'
		num+=1
	done | xargs | sed "s/ /,/g"
}

#get vm ip
function get_vm_ip() {
	vm_mac="`virsh domiflist "$1" | awk 'NR>2{if($0 != "") print $5}' | xargs`"
	vm_mac=${vm_mac:-no_mac}
	iplists=`
		for ik in ${vm_mac}
		do
			arp -n | grep -i "${ik}" | awk '{print $1}'
		done | xargs | sed "s/ /,/g" 
	`
	echo ${iplists:-noip}
}

#get vm mac
function get_vm_mac() {
        vm_mac="`virsh domiflist "$1" | awk 'NR>2{if($0 != "") print $5}' | xargs`"
        echo ${vm_mac}
}


function format_line() {
get_vmnames
[ "${alter}" == "-i" ] && get_arptable
[ "${alter}" == "-a" ] && get_arptable

for i in `cat $vm_info_file | awk '{print $1}'`;do
	if [ "${alter}" == "-i" ];then
		vmipinfo="`get_vm_ip ${i}`"
		sed -i -r "/^${i}/s/.*/& ${vmipinfo}/g" $vm_info_file
	elif [ "${alter}" == "-s" ];then
		vcpumem="`get_vcpuvmems ${i}`"
		blkinfo_temp="`get_vmblk ${i}`"
		blkinfo=$(echo ${blkinfo_temp} | sed -r 's/\//\\\//g')
		sed -i -r "/^${i}/s/.*/& ${vcpumem} ${blkinfo}/g" $vm_info_file
	elif [ "${alter}" == "-a" ];then
		vmipinfo="`get_vm_ip ${i}`"
                vmmacinfo="`get_vm_mac ${i}`"
		vcpumem="`get_vcpuvmems ${i}`"
		blkinfo_temp="`get_vmblk ${i}`"
		blkinfo=$(echo ${blkinfo_temp} | sed -r 's/\//\\\//g')
                sed -i -r "/^${i}/s/.*/& ${vmipinfo} ${vmmacinfo} ${vcpumem} ${blkinfo}/g" $vm_info_file
	elif [ "${alter}" == "-d" ];then
		blkinfo_temp="`get_vmblk ${i}`"
		blkinfo=$(echo ${blkinfo_temp} | sed -r 's/\//\\\//g')
                sed -i -r "/^${i}/s/.*/& ${blkinfo}/g" $vm_info_file
		
	fi
done
}


function format_printf() {

format_line
Length_tmp=$(cat $vm_info_file | awk 'BEGIN{A=0} {if(length($1)>=A) A=length($1)} END{print A}')
Length=$((Length_tmp + 5))


case ${alter} in

-a)
	cat $vm_info_file | \
	awk -v L=${Length} '
        BEGIN{printf "%-*s %-27s %-40s %-6s %-6s %-6s\n",L,"Instance Name","IP Address","HWaddr", "vCPU","vRAM","vDisk";for(i=1;i<=55;i++)printf "---";print ""}
        {printf "%-*s %-27s %-20s %-20s %-6s %-6s %-6s \n",L,$1,$2,$3,$4,$5,$6,$7}'
;;

-d)
	cat $vm_info_file | \
	awk -v L=${Length} '
	BEGIN{printf "%-*s %-15s\n",L,"Instance Name","vDisk";for(i=1;i<=46;i++)printf "---";print ""}
	{printf "%-*s %-15s\n",L,$1,$2}'
;;

-i)
	cat $vm_info_file | \
	awk -v L=${Length} '
	BEGIN{printf "%-*s %-15s\n",L,"Instance Name","IP Address";for(i=1;i<=14;i++)printf "---";print ""}
	{printf "%-*s %-15s\n",L,$1,$2}'
;;


-s)
	cat $vm_info_file | sed "s/G//g" | \
	awk -F'[ :,]' '
		BEGIN{ a=0;b=0 } {
		for(i=1;i<=NF;i++){
			if($i == "d") a+=$(i+1);
			else if($i == "v") b+=$(i+1) 
		};
		c+=$2;
		m+=$3 }
		END { printf "%-20s %-20s %-20s %-20s\n","vCPU","vRAM","DiskUsage","VdiskUsage";for(i=1;i<=34;i++)printf "---";print ""}
		END { printf "%-20s %-20s %-20s %-20s\n",c,m,b"G",a"G" }
	'
;;

-n)
        get_node_info	
;;

-b)
        autostart_domains	
        autostart_status
;;

stopall)
        stopall	
;;

startall)
        startall	
;;

setmem)
        shift
        setmem "$1"  "$2"
        ;;
setcpu)
        shift
        setcpu "$1"  "$2"
        ;;
setdisk)
        shift
        setdisk "$1" "$2" "$3" "$4"
        ;;
start)
        shift
        start "$1"
        ;;
stop)
        shift
        stop "$1"
        ;;

-v)
	echo "Version: vmm" $version
	echo "Author: Zez Wang" 
;;

-h)
	usage
;;



*)
	usage
;;
        esac
}


alter=$1
format_printf "$1" "$2" "$3" "$4" "$5"

